#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const SocketServer = require('ws').Server;
var messageService = require('../services/messages');
var clients = [];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function sendAll(message) {
  for (var j=0; j < clients.length; j++) {
    clients[j].send(message);
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// initialize the WebSocket server instance
const wss = new SocketServer({ server });

//init Websocket ws and handle incoming connect requests
wss.on('connection', function connection(ws) {
  clients.push(ws);
  console.log("connection ...");
  //on connect message
  ws.on('message', async function incoming(data) {
    const dataObj = JSON.parse(data);
    switch(dataObj.action) {
      case 'create': {
        const message = await messageService.create(dataObj.body);
        if (message) {
          const data = {
            type: 'createMessage',
            data: message,
          }
          sendAll(JSON.stringify(data));
        } else {
          ws.send('Create a new message error');
        }
        break;
      }
      case 'getAll': {
        const messages = await messageService.findAll();
        const data = {
          type: 'getAllMessages',
          data: messages,
        }
        if (messages) {
          sendAll(JSON.stringify(data));
        } else {
          ws.send('Error when get all messages');
        }
        break;
      }
      case 'remove': {
        if (dataObj.id) {
          const message = await messageService.remove(dataObj.id);
          if (message) {
            const data = {
              type: 'removeMessage',
              data: message,
            }
            sendAll(JSON.stringify(data));
          } else {
            ws.send(`Error when remove message with id: ${dataObj.id}`);
          }
        } else {
          ws.send('Cannot remove message without id');
        }
        break;
      }
      default: {
        ws.send(`Unexpected format -> ${data}`);
        break;
      }
    }
  });
  // ws.send('message from server at: ' + new Date());
});